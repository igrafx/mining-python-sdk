# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: iGrafx Mining SDK Tests

on:
  push:
    branches:
    - master
    - dev
    - release/*
  pull_request:
    branches:
    - master
    - dev
    - release/*
  schedule:
  - cron: "0 2 * * 1-5"

permissions:
  contents: read

env:
  WG_ID: ${{ secrets.WG_ID }}
  WG_KEY: ${{ secrets.WG_KEY }}
  WG_AUTH: ${{ secrets.WG_AUTH }}
  WG_URL: ${{ secrets.WG_URL }}
  WG_JDBC: ${{ secrets.WG_JDBC }}
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  NAME: ${{ secrets.NAME }}
  TYPE: ${{ secrets.TYPE }}

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.10.11"

    - name: Install Poetry
      run: |
        python -m pip install --upgrade pip
        pip install poetry

    - name: Setup project
      run: |
        poetry config virtualenvs.create false

    - name: Install project dependencies
      run: |
        poetry install --no-root

    - name: Install Flake8
      run: |
        poetry run pip install flake8

    - name: Install pytest
      run: |
        poetry run pip install pytest

    - name: Install pytest-mock
      run: |
        poetry run pip install pytest-mock

    - name: Set environment variables
      run: |
        echo "WG_ID=${{ secrets.WG_ID }}" >> $GITHUB_ENV
        echo "WG_KEY=${{ secrets.WG_KEY }}" >> $GITHUB_ENV
        echo "WG_AUTH=${{ secrets.WG_AUTH }}" >> $GITHUB_ENV
        echo "WG_URL=${{ secrets.WG_URL }}" >> $GITHUB_ENV
        echo "WG_JDBC=${{ secrets.WG_JDBC }}" >> $GITHUB_ENV
        echo "PROJECT_ID=${{ secrets.PROJECT_ID }}" >> $GITHUB_ENV
        echo "NAME=${{ secrets.NAME }}" >> $GITHUB_ENV
        echo "TYPE=${{ secrets.TYPE }}" >> $GITHUB_ENV

    - name: Debug JDBC Credentials
      run: |
        echo "JDBC URL: $WG_JDBC"
        echo "WG_ID: ${WG_ID:+set}"
        echo "WG_KEY: ${WG_KEY:+set}"
        echo "WG_AUTH: ${WG_AUTH:+set}"
      env:
        WG_JDBC: ${{ secrets.WG_JDBC }}
        WG_ID: ${{ secrets.WG_ID }}
        WG_KEY: ${{ secrets.WG_KEY }}
        WG_AUTH: ${{ secrets.WG_AUTH }}


    - name: Debug Java Installation
      run: |
        java -version
        echo "JAVA_HOME: $JAVA_HOME"
        which java

    - name: Force Java 17
      run: |
        export JAVA_HOME=/usr/lib/jvm/temurin-17-jdk-amd64
        export PATH=$JAVA_HOME/bin:$PATH
        java -version
        

    - name: Debug JAR Files
      run: |
        ls -l /home/runner/work/mining-python-sdk/mining-python-sdk/jars/


    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --ignore=F401,W504,W503,W605
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        poetry run flake8 . --count --exit-zero --max-complexity=14 --max-line-length=122 --statistics --ignore=F401,W504,W503,W605

    - name: Debug Contents
      run: ls -R

    - name: Debug Mining-Python-SDK Directory
      run: |
        ls -al ./igrafx_mining_sdk

    - name: Check GitHub Runner IP
      run: curl ifconfig.me

    - name: Check Connection to JDBC Server
      run: nc -vz mining-data.staging.igrafxcloud.com 443


    - name: Check JDBC JAR Version
      run: jar tf /home/runner/work/mining-python-sdk/mining-python-sdk/jars/avatica-1.26.0.jar | grep META-INF

    - name: Set Environment Variables and Test with pytest
      env:
        WG_ID: ${{ secrets.WG_ID }}
        WG_KEY: ${{ secrets.WG_KEY }}
        WG_AUTH: ${{ secrets.WG_AUTH }}
        WG_URL: ${{ secrets.WG_URL }}
        WG_JDBC: ${{ secrets.WG_JDBC }}
        PROJECT_ID: ${{ secrets.PROJECT_ID }}
        NAME: ${{ secrets.NAME }}
        TYPE: ${{ secrets.TYPE }}
      run: |
        python -m pytest
