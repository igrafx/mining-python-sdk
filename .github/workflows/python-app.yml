# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: iGrafx Mining SDK Tests

on:
  push:
    branches:
    - master
    - dev
    - release/*
  pull_request:
    branches:
    - master
    - dev
    - release/*
  schedule:
  - cron: "0 2 * * 1-5"

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.10.11"

    - name: Install Poetry
      run: |
        python -m pip install --upgrade pip
        pip install poetry

    - name: Setup project
      run: |
        poetry config virtualenvs.create false

    - name: Install project dependencies
      run: |
        poetry install --no-root

    - name: Install Flake8
      run: |
        poetry run pip install flake8

    - name: Install pytest
      run: |
        poetry run pip install pytest

    - name: Install pytest-mock
      run: |
        poetry run pip install pytest-mock

    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'zulu'

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --ignore=F401,W504,W503,W605
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        poetry run flake8 . --count --exit-zero --max-complexity=14 --max-line-length=122 --statistics --ignore=F401,W504,W503,W605

    - name: Set Environment Variables and Test with pytest
      env:
        WG_ID: ${{ secrets.WG_ID }}
        WG_KEY: ${{ secrets.WG_KEY }}
        WG_AUTH: ${{ secrets.WG_AUTH }}
        WG_URL: ${{ secrets.WG_URL }}
        WG_JDBC: "${{ secrets.WG_JDBC }}"
        PROJECT_ID: ${{ secrets.PROJECT_ID }}
        NAME: ${{ secrets.NAME }}
        TYPE: ${{ secrets.TYPE }}
      run: |
        python -m pytest
