.install_sdk_template: &install_sdk
  before_script:
    - python -V  # Print out python version for debugging
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install logpickr_sdk/

.security_and_quality_rules_template: &security_and_quality_rules
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_COMMIT_BRANCH == "dev"
    - if: $CI_COMMIT_BRANCH =~ /^release.*/
    - if: $CI_COMMIT_TAG

stages:
  - test
  - build
  - doc

include:
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  - template: Code-Quality.gitlab-ci.yml

code_quality:
  <<: *security_and_quality_rules
  after_script:
    - cat gl-code-quality-report.json | docker run -i stedolan/jq -c 'map({description,fingerprint,location,severity})|unique_by({fingerprint})' > tmp.json && mv tmp.json gl-code-quality-report.json

bandit-sast:
  <<: *security_and_quality_rules

semgrep-sast:
  <<: *security_and_quality_rules

gemnasium-python-dependency_scanning:
  <<: *security_and_quality_rules

image: python:latest

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache:
  paths:
    - .cache/pip
    - venv/

build_wheel:
  stage: build
  <<: *install_sdk
  script:
    - cd logpickr_sdk
    - python setup.py bdist_wheel
    - cd dist
    - cp *.whl logpickr_sdk.whl
  artifacts:
    paths:
      - logpickr_sdk/dist/*.whl

pages:
  stage: doc
  dependencies:
    - build_wheel
  <<: *install_sdk
  script:
    - pip install sphinx sphinx-rtd-theme
    # should already be installed by the package, but better safe than sorry
    - ls logpickr_sdk/dist/
    - mkdir sphinxdocs/_static
    - mv logpickr_sdk/dist/logpickr_sdk.whl sphinxdocs/_static/
    - cd sphinxdocs
    - ls _static/
    - make html
    - mv _build/html/ ../public/
  artifacts:
    paths:
      - public
  only:
    - master
