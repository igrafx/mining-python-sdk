.install_sdk_template: &install_sdk
  before_script:
    - python -V  # Print out python version for debugging
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install logpickr_sdk/

.security_and_quality_rules_template: &security_and_quality_rules
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_COMMIT_BRANCH == "dev"
    - if: $CI_COMMIT_BRANCH =~ /^release.*/
    - if: $CI_COMMIT_TAG

stages:
  - test
  - build
  - doc

include:
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  - template: Code-Quality.gitlab-ci.yml

code_quality:
  <<: *security_and_quality_rules
  after_script:
    - cat gl-code-quality-report.json | docker run -i stedolan/jq -c 'map({description,fingerprint,location,severity})|unique_by({fingerprint})' > tmp.json && mv tmp.json gl-code-quality-report.json

bandit-sast:
  <<: *security_and_quality_rules

semgrep-sast:
  <<: *security_and_quality_rules

gemnasium-python-dependency_scanning:
  <<: *security_and_quality_rules

image: python:latest

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

setup:
  stage: .pre
  script:
    # Wheel package file name convention is the following:
    # {distribution}-{version}(-{build tag})?-{python tag}-{abi tag}-{platform tag}.whl
    # Thus it cannot contain any '-' character in it's version number
    # See https://peps.python.org/pep-0491/#file-name-convention

    # Replace '-' with '.'
    - version=${CI_COMMIT_REF_NAME//-/.}
    # Remove prefix before '/' (feat/ or fix/)
    - version=$(echo $version | sed 's-.*/--g')
    # Replace every characters except alphanumerical and '.' with '_'
    - version=$(echo $version | sed 's/[^a-zA-Z0-9.]/_/g')
    # If CI_COMMIT_REF_SLUG was not defined, assign default value
    - version=${version:-0.0.1}
    - wheel_filename="logpickr_sdk-${version}-py3-none-any.whl"
    - echo "VERSION=${version}" >> build.env
    - echo "WHEEL_FILENAME=${wheel_filename}" >> build.env
  artifacts:
    reports:
      dotenv: build.env

cache:
  paths:
    - .cache/pip
    - venv/

build_wheel:
  stage: build
  <<: *install_sdk
  script:
    - echo "VERSION=${VERSION}" >> build_wheel.env
    - echo "WHEEL_FILENAME=${WHEEL_FILENAME}" >> build_wheel.env
    - cd logpickr_sdk
    - sed -i -E "s#version=.*,#version=\"${VERSION}\",#g" setup.py
    - python setup.py bdist_wheel
    - cd dist
    - cp *.whl logpickr_sdk.whl
    - cp logpickr_sdk.whl ${WHEEL_FILENAME}
  artifacts:
    paths:
      - logpickr_sdk/dist/${WHEEL_FILENAME}
      - build_wheel.env

pages:
  stage: doc
  needs:
    job: build_wheel
    artifacts: true
  script:
    - source build_wheel.env
    - echo "${WHEEL_FILENAME}"
    - pip install sphinx sphinx-rtd-theme
    # should already be installed by the package, but better safe than sorry
    - ls logpickr_sdk/dist/
    - mkdir sphinxdocs/_static
    - mv logpickr_sdk/dist/${WHEEL_FILENAME} sphinxdocs/_static/
    - sed -i -E "s#logpickr_sdk.whl#${WHEEL_FILENAME}#g" sphinxdocs/howto.rst
    - cd sphinxdocs
    - ls _static/
    - make html
    - mv _build/html/_downloads/*/${WHEEL_FILENAME} _build/html/_downloads/
    - rm -r  _build/html/_downloads/*/
    - sed -i -E "s#_downloads/.+/${WHEEL_FILENAME}#_downloads/${WHEEL_FILENAME}#g" _build/html/howto.html
    - mv _build/html/ ../public/
  artifacts:
    paths:
      - public
  only:
    - tags
